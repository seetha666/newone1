what is the ORM?
ORM stands for object relational mapping for example i have python pogram is there
and i have database is there in database data will be stored in inthe form of table
in python data will be stored in the form of object if want map this object  to database table  some frame work should be there that is called orm  without writing sql query
to select all employees from the employees table :
we need to write sql queries like select * from employees 
ORM: Employees.Objects.all()
--------------------------------------------
how to creat model and mapping data to the database 
1.create poject: python -m django startproject myprojectorm1
2.create app and add in settings.py in installed app 
3.create model and create admin
4.do command makemigrations and migrate and createsuperuser
5.to add records write one python script for that projct

Demo:

settings.py:
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'testapp',
]

model.py:
from django.db import models

# Create your models here.
class Employee(models.Model):
    eno=models.IntegerField()
    ename=models.CharField(max_length=100)
    esal=models.FloatField()
    eadd=models.CharField(max_length=250)
admin.py:
from django.contrib import admin
from testapp.models import Employee
class EmployeeAdmin(admin.ModelAdmin):
    list_display=['eno','ename','esal','eadd']
admin.site.register(Employee,EmployeeAdmin)

then run the commands:
python manage.py makemigrations
python manage.py migrate
python manage.py createsuperuser

then stop the server and run python script:
populate.py:
import os
os.environ.setdefault('DJANGO_SETTINGS_MODULE','myprojectorm1.settings')
import django
django.setup()
from testapp.models import Employee
from faker import Faker
from random import *
faker=Faker()
def populate(n):
    for i in range(n):
        fno=randint(100,200)
        fname=faker.name()
        fsal=randint(1000,10000)
        fadd=faker.city()
        emprecord=Employee.objects.get_or_create(
            eno=fno,
            ename=fname,
            esal=fsal,
            eadd=fadd
            )
    
n=int(input("Enter the no of records"))
populate(n)
print(f'{n} records created succussfully ')
Note in default settings we have to set our projct name (os.environ.setdefault('DJANGO_SETTINGS_MODULE','myprojectorm1.settings'))

then execute the script python populate.py
then run our project  check in addmin db the data will be insterted 

for displaying our data in brower we need to use templates for that 
here i am taking one templates folder in that i am taking testapp folder in that i am taking two files
base.html and index.html
then we can write view class and write logic:
from django.shortcuts import render

from testapp.models import Employee
def retrive_view(request):
    emp_list=Employee.objects.all()#to get all records here emp_list type is queryset
    print(type(emp_list))
    return render(request,'testapp/index.html',{"emp_list":emp_list})

emp=Employee.objects.get(id=1)# here type of emp is Employee object it is usd to get Employee object based on id
how to filter records based on some conditions
fil=Employee.objects.filter(esal__gt=2000)
fil=Employee.objects.filter(esal__gte=2000)
fil=Employee.objects.filter(esal__lt=2000)
fil=Employee.objects.filter(esal__lte=2000)
various posible field lookups:
1.exact--->exact match
Employee.objects.get(id__exact=14)
contains--->given string is contains
emp_list=Employee.objects.filter(ename__contains='jhon')

in:
in a given iterable like tuple of list etc 
select all employees where id is in[1,3,5]
 emp_list=Employee.objects.filter(id__in=[1,3,5])
10.startswith:
case sensitive starts with
selsect all employees where ename starts with 'D'
employee.objects.filter(ename__startswith='D')
emp_list=Employee.objects.filter(ename__endswith="j")
emp_list=Employee.objects.filter(ename__iendswith="j")#case sensitive
range:
to select all employees where esal in the range1000 to6000 (inclusive)

how to implement OR queries in django ORM:
emp_name=Employee.objects.filter(ename__startswith='B')
emp_esal=Employee.objects.filter(esal__lt=2000)
emp_list=emp_name | emp_esal
2nd way:
from django.db.models import Q
emp_list=Employee.objects.filter(Q(ename__startswith='B')|Q(esal__lt=2000))

all conditions should staticefies?
emp_list=emp_name & emp_esal
filter(Q(ename__startswith='B')&Q(esal__lt=2000))
filter(ename__startswith='B',esal__lt=2000)

How to implement Not queries in django?
we can implement 2ways
1.exclude(condition)=>to get records where condition is FloatField
example:emp_list=Employee.objects.exclude(ename__startswith='D')
2.filter(~Q(condition))
emp_list=Employee.objects.filter(~Q(ename__startswith='D'))

how to select required columns in the queryset:
1.By using values_list()
example: Employee.objects.all().values_list('ename','esal')
2nd way by using values :
emp_list=Employee.objects.all().values('ename','esal')
3rdway by using only():

example:
emp_list=Employee.objects.all().only('ename','esal')

Note:
values_list--> contains tuple 
values()-->contains dict objects
only()-->contains Employees object
hence only() method is recomended when compared with others.

by using values view file
def retrive_view(request):
    emp_list=Employee.objects.all().values('ename','esal','eadd')
   
    print(type(emp_list))
    return render(request,'testapp/specific_columns.html',{"emp_list":emp_list})
    specific_columns.html
    <!DOCTYPE html>
{% extends "testapp/base.html" %}
{% block body_block %}
  <h1>Employee infermation Dashboard</h1>
  <table border="2">
    <thead>
        <th>Employee name</th>
        <th>Emp Salary</th>
        <th>Address </th>
        </thead>
    {%for emp in emp_list%}
    <tr>
        <td>{{emp.ename}}</td>
        <td>{{emp.esal}}</td>
        <td>{{emp.eadd}}</td>
    </tr>
  
    {%endfor%}
  </table>
{% endblock  %}
by using values_list:
example:emp_list=Employee.objects.all().values_list('ename','esal','eadd')
 <table border="2">
    <thead>
        <th>Employee name</th>
        <th>Emp Salary</th>
        <th>Address </th>
        </thead>
    {%for emp in emp_list%}
    <tr>
      {%for v in emp%}
        <td>{{v}}</td>
        {%endfor%}
    </tr>
  
    {%endfor%}
  </table>
{% endblock  %}
---------------------------
agrigate function ORM:
django orm defines several functions to perform agregate operations
Avg(),max(),min(),sum(),count()

example: views.py
from django.db.models import Max,Min,Avg,Sum,Count
def agregate_view(request):
    max=Employee.objects.all().aggregate(Max('esal'))
    min=Employee.objects.all().aggregate(Min('esal'))
    avg=Employee.objects.all().aggregate(Avg('esal'))
    sum=Employee.objects.all().aggregate(Sum('esal'))
    count=Employee.objects.all().aggregate(Count('esal'))
    print(max)
    my_dict={'max':max['esal__max'],'min':min['esal__min'],'avg':avg['esal__avg'],'sum':sum['esal__sum'],'count':count['esal__count']}
    return render(request,'testapp/aggregate.html',my_dict)

    html file:
    aggregate.html
    <!DOCTYPE html>
{% extends "testapp/base.html" %}
{% block body_block %}
  <h1>Employee Agregate infermation Dashboard</h1>
  <ul>
    <li>Max salary {{max}}</li>
    <li>MinSalary {{min}}</li>
    <li>Average Salary {{avg}}</li>
    <li>Sum of Salary {{sum}}</li>
    <li>No of Employees {{count}}</li>
  </ul>
{% endblock  %}

----------------------
how to perform create update and delete records
------------------------------------------------
to add records:
e=Employee(eno=124,ename='ram',esal=2587,eadd='banglore')
e.save()
2ndway
e=Employee.objects.create(eno=786,ename='Ramaiah',esal=150000,eadd='Hyderabad')

Bulk create(by using bulk_create() method):
Employee.objects.bulk_create(Employee(eno=555,ename='SACHIN',esal=2500,eadd='MUBAI'),
Employee(eno=666,ename='ROHITH',esal=2568,eadd='VIZAG'),
Employee(eno=777,ename='DHONI',esal=2587,eadd='JARKAND'),

Employee(eno=555,ename='SACHIN',esal=2500,eadd='MUBAI'),
Employee(eno=666,ename='ROHITH',esal=2568,eadd='VIZAG'),
Employee(eno=777,ename='DHONI',esal=2587,eadd='JARKAND'))
---------------------------------------

How to sort queryset in sorting order:
emp_list=Employee.objects.all():Based on insertion order
1.to sort all employees acording to ascending order eno
emp_list=Employee.objects.all().order_by('eno')

2.to sort all employees acording to descending order by eno
emp_list=Employee.objects.all().order_by('-eno')

3.to get highest saried employee object?
arrange all employees in descending order and 
emp_list=Employee.objects.all().order_by('-eno')[0]

4.to get second highest saried employee object?
emp_list=Employee.objects.all().order_by('-eno')[1]
emp_list=Employee.objects.all().order_by('ename')
5.how to delete multiple records 
qs=Employee.objects.filter(esal__gte=8000)
qs.delete()

6.how to delete all records (truncate operation in sql)
qs=Employee.objects.all().delete()

7.how to update perticular record:
e=Employee.objects.get(eno==888)
e.esal=999
e.save()

ignore case:
emp_list=Employee.objects.all().order_by(Lower('ename'))
How to perform union operation for queryset:
by using union operation,we can combine results of 2 or more queryset from same
model or from different model
example:
q1=Employee.objects.filter(esal__lt=5000)
q2=Employee.objects.filter(ename__startswith='j')
q3=q.union(q2)

To work with multiple models:

